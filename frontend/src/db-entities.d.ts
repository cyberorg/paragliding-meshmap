import { MessageIn, MessageOut, Neighbour } from './interfaces.js'
/*
 * This file was generated by a tool.
 * Rerun sql-ts to regenerate this file.
 */
export interface CertificationDocumentsEntity {
  certificateNumber: string
  createdAt: string
  document: Buffer
  extension: string
  id: number
  issuingOrganization: string
  updatedAt: string
  userId?: number
}
export interface DeviceMetricsEntity {
  airUtilTx?: number
  batteryLevel?: number
  channelUtilization?: number
  createdAt: string
  id: number
  nodeId: number
  updatedAt: string
  uptimeSeconds?: number
  voltage?: number
}
export interface EnvironmentMetricsEntity {
  barometricPressure?: number
  createdAt: string
  current?: number
  gasResistance?: number
  iaq?: number
  id: number
  nodeId: number
  relativeHumidity?: number
  temperature?: number
  updatedAt: string
  voltage?: number
}
export interface IdentityDocumentsEntity {
  createdAt: string
  document: Buffer
  extension: string
  id: number
  updatedAt: string
  userId?: number
}
export interface InsurancePolicyDocumentsEntity {
  contactPhone: string
  createdAt: string
  document: Buffer
  extension: string
  id: number
  policyNumber: string
  provider: string
  updatedAt: string
  userId: number
  validityEnd: string
  validityStart: string
}
export interface LocationsEntity {
  createdAt: string
  id: number
  location: string
  updatedAt: string
}
export interface MapReportsEntity {
  altitude?: number
  createdAt: string
  firmwareVersion: string
  hardwareModel: number
  hasDefaultChannel?: boolean
  id: number
  latitude?: number
  longName: string
  longitude?: number
  modemPreset?: number
  nodeId: number
  numOnlineLocalNodes?: number
  positionPrecision?: number
  region?: number
  role?: number
  shortName: string
  updatedAt: string
}
export interface NeighbourInfosEntity {
  createdAt: string
  id: number
  neighbours?: Neighbour[]
  nodeBroadcastIntervalSecs: number
  nodeId: number
  updatedAt: string
}
export interface NodesEntity {
  aboveGroundLevel?: number
  activity?: NodeActivity
  airUtilTx?: number
  altitude?: number
  barometricPressure?: number
  batteryLevel?: number
  channelUtilization?: number
  createdAt: string
  firmwareVersion?: string
  flyXCToken?: string
  hardwareModel?: number
  hasDefaultChannel?: boolean
  inbox?: MessageIn[]
  isLicensed?: boolean
  latitude?: number
  longName?: string
  longitude?: number
  modemPreset?: number
  neighbourBroadcastIntervalSecs?: number
  neighbours?: Neighbour[]
  neighboursUpdatedAt?: string
  nodeId: number
  numOnlineLocalNodes?: number
  outbox?: MessageOut[]
  positionPdop?: number
  positionPrecision?: number
  positionPrecisionBits?: number
  positionTimestamp?: string
  positionUpdatedAt?: string
  region?: number
  relativeHumidity?: number
  role?: number
  satsInView?: number
  shortName?: string
  temperature?: number
  updatedAt: string
  uptimeSeconds?: number
  voltage?: number
}
export interface PartnerMessagesEntity {
  createdAt: string
  email: string
  id: number
  message: string
  name: string
  subject: string
  updatedAt: string
}
export interface PositionsEntity {
  aboveGroundLevel?: number
  altitude?: number
  channel?: number
  channelId?: string
  createdAt: string
  from: number
  gatewayId?: number
  groundSpeed?: number
  groundTrack?: number
  id: number
  latitude?: number
  longitude?: number
  nodeId: number
  packetId?: number
  pdop?: number
  precisionBits?: number
  satsInView?: number
  time?: string
  timestamp?: string
  to: number
  updatedAt: string
}
export interface PowerMetricsEntity {
  ch1Current?: number
  ch1Voltage?: number
  ch2Current?: number
  ch2Voltage?: number
  ch3Current?: number
  ch3Voltage?: number
  createdAt: string
  id: number
  nodeId: number
  updatedAt: string
}
export interface ServiceEnvelopesEntity {
  channelId: string
  createdAt: string
  from?: number
  gatewayId?: number
  id: number
  mqttTopic: string

  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
  protobuf: any
  to?: number
  updatedAt: string
}
export interface SessionsEntity {
  destroyedAt?: string
  expiredAt: number
  id: string
  json: string
}
export interface TextMessagesEntity {
  channel: number
  channelId: string
  createdAt: string
  from: number
  gatewayId?: number
  hopLimit?: number
  id: number
  packetId: number
  rxRssi?: number
  rxSnr?: number
  rxTime?: number
  text: string
  to: number
  updatedAt: string
  wantResponse?: boolean
}
export interface TraceroutesEntity {
  channel?: number
  channelId?: string
  createdAt: string
  from: number
  gatewayId?: number
  id: number
  packetId?: number
  route?: number[]
  to: number
  updatedAt: string
  wantResponse: boolean
}
export interface UsersEntity {
  address1?: string
  address2?: string
  adminLocations?: string[]
  allergies?: string
  bloodGroup?: string
  city?: string
  country?: string
  createdAt: string
  displayName?: string
  dob?: string
  email: string
  embassyPhone?: string
  flightLocations?: string[]
  id: number
  medicalConditions?: string
  medications?: string
  nationality?: string
  paraglider1Manufacturer?: string
  paraglider1Model?: string
  paraglider1PrimaryColor?: string
  paraglider1SecondaryColor?: string
  paraglider2Manufacturer?: string
  paraglider2Model?: string
  paraglider2PrimaryColor?: string
  paraglider2SecondaryColor?: string
  postalCode?: string
  primaryEmergencyContactName?: string
  primaryEmergencyContactPhone?: string
  primaryPhone?: string
  profilePhotoUrl?: string
  secondaryEmergencyContactName?: string
  secondaryEmergencyContactPhone?: string
  secondaryPhone?: string
  state?: string
  superUser: boolean
  trackerUrls?: string
  updatedAt: string
}
export interface WaypointsEntity {
  channel: number
  channelId: string
  createdAt: string
  description?: string
  expire?: number
  from: number
  gatewayId?: number
  icon?: number
  id: number
  latitude: number
  lockedTo?: number
  longitude: number
  name?: string
  packetId: number
  to: number
  updatedAt: string
  waypointId: number
}
